!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
.DEFAUT_GOAL	libft/Makefile	/^.DEFAUT_GOAL = all$/;"	m
BIN	Makefile	/^BIN = bin$/;"	m
BLU	Makefile	/^BLU = \\033[34m$/;"	m
BONUS	libft/Makefile	/^BONUS = ft_lstadd_back.c ft_lstadd_front.c ft_lstclear.c ft_lstdelone.c \\$/;"	m
CC	libft/Makefile	/^CC = cc$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Werror -Wextra -g -w$/;"	m
ECHO	Makefile	/^ECHO = echo$/;"	m
EOC	Makefile	/^EOC = \\033[0m$/;"	m
FLAGS	Makefile	/^FLAGS = -Wall -Wextra -Werror -g -Iincludes$/;"	m
GRA	Makefile	/^GRA = \\033[37m$/;"	m
GRE	Makefile	/^GRE = \\033[32m$/;"	m
GREATER	includes/minishell.h	/^    GREATER = 1,$/;"	e	enum:e_token
GREATER_DOUBLE	includes/minishell.h	/^    GREATER_DOUBLE = 2,$/;"	e	enum:e_token
HEX_BASE	includes/libft.h	15;"	d
HEX_BASE	includes/printf.h	16;"	d
HEX_BASE	libft/libft.h	16;"	d
HEX_BASE	libft/printf.h	16;"	d
LESS	includes/minishell.h	/^    LESS = 3,$/;"	e	enum:e_token
LESS_DOUBLE	includes/minishell.h	/^    LESS_DOUBLE = 4,$/;"	e	enum:e_token
LIBFT	Makefile	/^LIBFT = $(LIBFT_DIR)\/libft.a$/;"	m
LIBFT_DIR	Makefile	/^LIBFT_DIR = .\/libft$/;"	m
LIBFT_H	includes/libft.h	14;"	d
LIBFT_H	libft/libft.h	14;"	d
MANDATORY	Makefile	/^MANDATORY = minishell$/;"	m
MINISHELL_H	includes/minishell.h	2;"	d
NAME	Makefile	/^NAME = $(MANDATORY)$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NO_COLOR	libft/Makefile	/^NO_COLOR = \\033[m$/;"	m
OBJS	libft/Makefile	/^OBJS = $(SRCS:.c=.o) $/;"	m
OBJS_BONUS	libft/Makefile	/^OBJS_BONUS = $(BONUS:.c=.o)$/;"	m
OBJ_BOTH	Makefile	/^OBJ_BOTH = $(foreach src,$(SRCS_FILES),$(BIN)\/$(src:.c=.o))$/;"	m
OK_COLOR	libft/Makefile	/^OK_COLOR = \\033[0;32m$/;"	m
PIPE	includes/minishell.h	/^    PIPE = 5$/;"	e	enum:e_token
PRINTF_H	includes/printf.h	15;"	d
PRINTF_H	libft/printf.h	15;"	d
RED	Makefile	/^RED = \\033[31m$/;"	m
SRCS	Makefile	/^SRCS = main.c signals.c env.c utils.c quotes.c error.c lexer.c$/;"	m
SRCS	libft/Makefile	/^SRCS = ft_atoi.c ft_bzero.c ft_calloc.c ft_isalnum.c ft_isalpha.c ft_isascii.c \\$/;"	m
SRCS_DIR	Makefile	/^SRCS_DIR = srcs\/$/;"	m
SRCS_FILES	Makefile	/^SRCS_FILES = $(addprefix $(SRCS_DIR), $(SRCS))$/;"	m
add_token	srcs/lexer.c	/^int    add_token(char *input, int i, t_lexer **head)$/;"	f
add_word	srcs/lexer.c	/^int     add_word(char *input, int i, t_lexer **head)$/;"	f
clean	libft/ft_split.c	/^static void	clean(char **array, unsigned int nb)$/;"	f	file:
content	includes/libft.h	/^	void			*content;$/;"	m	struct:s_list
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
count_quotes	srcs/quotes.c	/^int	count_quotes(char *line)$/;"	f
digit_count	libft/ft_itoa.c	/^static int	digit_count(long n)$/;"	f	file:
e_token	includes/minishell.h	/^typedef enum e_token$/;"	g
env_paths	includes/minishell.h	/^    char        *env_paths;$/;"	m	struct:s_data
env_vars	includes/minishell.h	/^	char **env_vars;$/;"	m	struct:s_env
fill_lexer_struct	srcs/lexer.c	/^t_lexer   *fill_lexer_struct(char *input)$/;"	f
find_matching_quote	srcs/quotes.c	/^int	find_matching_quote(char *line, int i, int *num_del, int del)$/;"	f
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t nelements, size_t bytes)$/;"	f
ft_cmp_nb	libft/ft_cmp_nb.c	/^int	ft_cmp_nb(char *a, char *b)$/;"	f
ft_conversions	libft/printf.c	/^int	ft_conversions(const char c, va_list *args)$/;"	f
ft_count_ac	libft/ft_count_ac.c	/^int	ft_count_ac(char **av)$/;"	f
ft_error	srcs/error.c	/^int	ft_error(int error)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(char *av)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del) (void *))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_malloc_substr	libft/ft_substr.c	/^static char	*ft_malloc_substr(unsigned int start, size_t n, size_t lenstr)$/;"	f	file:
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *memoire, int value, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *memoire1, const void *memoire2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void	*dest, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *dest, int value, size_t n)$/;"	f
ft_printf	libft/printf.c	/^int	ft_printf(const char *format, ...)$/;"	f
ft_process_av	libft/ft_process_av.c	/^char	**ft_process_av(int ac, char **av)$/;"	f
ft_putchar	libft/put.c	/^int	ft_putchar(int c)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putdecimal	libft/put.c	/^int	ft_putdecimal(va_list *args)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *str, int fd)$/;"	f
ft_putnbr	libft/put.c	/^int	ft_putnbr(unsigned long nb, unsigned int base, int transform)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putptr	libft/put.c	/^int	ft_putptr(va_list *args)$/;"	f
ft_putstr	libft/put.c	/^int	ft_putstr(const char *str)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *str, int fd)$/;"	f
ft_set_str	libft/ft_strtrim.c	/^static int	ft_set_str(const char c, const char *set)$/;"	f	file:
ft_skip_white_spaces	srcs/utils.c	/^int ft_skip_white_spaces(char *str)$/;"	f
ft_split	libft/ft_split.c	/^char	**ft_split(char const *str, char c)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *src)$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *str, void (*fonction)(unsigned int, char*))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(const char *s1, const char *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dest, const char *src, size_t n)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dest, const char *src, size_t n)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*fonction)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *src, const char *to_find, size_t n)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(const char *s1, const char *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *str, unsigned int start, size_t n)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
get_env_path	srcs/env.c	/^char    *get_env_path(char **envp)$/;"	f
i	includes/minishell.h	/^    int         i;$/;"	m	struct:s_lexer
is_token	srcs/lexer.c	/^bool    is_token(char c)$/;"	f
lexer	srcs/lexer.c	/^void    lexer(t_data *data, char *argv)$/;"	f
lexer_head	includes/minishell.h	/^    t_lexer     *lexer_head;$/;"	m	struct:s_data
main	srcs/main.c	/^int main(int argc, char **argv, char **envp)$/;"	f
new_node	srcs/utils.c	/^t_lexer *new_node(char *input, t_token token, int index)$/;"	f
next	includes/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	includes/minishell.h	/^    t_lexer     *next;$/;"	m	struct:s_lexer
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
previous	includes/minishell.h	/^    t_lexer     *previous;$/;"	m	struct:s_lexer
s_data	includes/minishell.h	/^typedef struct s_data$/;"	s
s_env	includes/minishell.h	/^typedef struct s_env$/;"	s
s_lexer	includes/minishell.h	/^typedef struct s_lexer$/;"	s
s_list	includes/libft.h	/^typedef struct s_list$/;"	s
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
sigint_handling	srcs/signals.c	/^void sigint_handling(int signal)$/;"	f
signals_handling	srcs/signals.c	/^void    signals_handling(void)$/;"	f
stack_add_bottom	srcs/utils.c	/^void    stack_add_bottom(t_lexer **head, t_lexer *new)$/;"	f
t_data	includes/minishell.h	/^}   t_data;$/;"	t	typeref:struct:s_data
t_env	includes/minishell.h	/^typedef struct s_env t_env;$/;"	t	typeref:struct:s_env
t_lexer	includes/minishell.h	/^typedef struct s_lexer t_lexer;$/;"	t	typeref:struct:s_lexer
t_lexer	includes/minishell.h	/^}   t_lexer;$/;"	t	typeref:struct:s_lexer
t_list	includes/libft.h	/^}		t_list;$/;"	t	typeref:struct:s_list
t_list	libft/libft.h	/^}		t_list;$/;"	t	typeref:struct:s_list
t_token	includes/minishell.h	/^}   t_token;$/;"	t	typeref:enum:e_token
token	includes/minishell.h	/^    t_token     token;$/;"	m	struct:s_lexer
word	includes/minishell.h	/^    char        *word;$/;"	m	struct:s_lexer
words_count	libft/ft_split.c	/^static size_t	words_count(char const *str, char c)$/;"	f	file:
words_lenght	libft/ft_split.c	/^static size_t	words_lenght(char const *str, char c)$/;"	f	file:
