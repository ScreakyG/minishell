!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
.DEFAUT_GOAL	libft/Makefile	/^.DEFAUT_GOAL = all$/;"	m
ALL_FILES	Makefile	/^ALL_FILES = $(SRCS_FILES) $(ENV_FILES) $(LEXER_FILES) $(EXPANDER_FILES) $(CMD_FILES) $(EXECUTION_FILES) $(BUILTIN_FILES) $(REDIRECTIONS_FILES)$/;"	m
ALL_OBJ	Makefile	/^ALL_OBJ = $(foreach src,$(ALL_FILES),$(BIN)\/$(src:.c=.o))$/;"	m
BIN	Makefile	/^BIN = bin$/;"	m
BLU	Makefile	/^BLU = \\033[34m$/;"	m
BONUS	libft/Makefile	/^BONUS = ft_lstadd_back.c ft_lstadd_front.c ft_lstclear.c ft_lstdelone.c \\$/;"	m
BUILTIN	Makefile	/^BUILTIN = env.c echo.c builtin.c pwd.c exit.c unset.c export.c cd.c \\$/;"	m
BUILTIN_DIR	Makefile	/^BUILTIN_DIR = builtin\/$/;"	m
BUILTIN_FILES	Makefile	/^BUILTIN_FILES = $(addprefix $(BUILTIN_DIR), $(BUILTIN))$/;"	m
CC	libft/Makefile	/^CC = gcc$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Werror -Wextra -g -w$/;"	m
CMD_DIR	Makefile	/^CMD_DIR = command\/$/;"	m
CMD_FILES	Makefile	/^CMD_FILES = $(addprefix $(CMD_DIR), $(COMMAND))$/;"	m
CMD_NOT_EXECUTABLE	includes/minishell.h	20;"	d
CMD_NOT_FOUND	includes/minishell.h	19;"	d
COMMAND	Makefile	/^COMMAND =  \\$/;"	m
DEFAULT	includes/minishell.h	/^		DEFAULT,$/;"	e	enum:e_quoting_status
DQUOTE	includes/minishell.h	/^		DQUOTE$/;"	e	enum:e_quoting_status
ECHO	Makefile	/^ECHO = echo$/;"	m
END	includes/minishell.h	/^	END = 0,$/;"	e	enum:e_token
ENV	Makefile	/^ENV = chained.c env.c init.c is.c list.c \\$/;"	m
ENV_DIR	Makefile	/^ENV_DIR = env\/$/;"	m
ENV_FILES	Makefile	/^ENV_FILES = $(addprefix $(ENV_DIR), $(ENV))$/;"	m
EOC	Makefile	/^EOC = \\033[0m$/;"	m
EXECUTION	Makefile	/^EXECUTION = execute.c execute_cmd.c execute_utils.c parse_path.c\\$/;"	m
EXECUTION_DIR	Makefile	/^EXECUTION_DIR = execution\/$/;"	m
EXECUTION_FILES	Makefile	/^EXECUTION_FILES = $(addprefix $(EXECUTION_DIR), $(EXECUTION))$/;"	m
EXPANDER	Makefile	/^EXPANDER = var_expander.c var_expander_utils.c variables.c var_replace.c \\$/;"	m
EXPANDER_DIR	Makefile	/^EXPANDER_DIR = expander\/$/;"	m
EXPANDER_FILES	Makefile	/^EXPANDER_FILES = $(addprefix $(EXPANDER_DIR), $(EXPANDER))$/;"	m
FLAGS	Makefile	/^FLAGS = -Wall -Werror -Wextra  -g$/;"	m
GRA	Makefile	/^GRA = \\033[37m$/;"	m
GRE	Makefile	/^GRE = \\033[32m$/;"	m
GREATER	includes/minishell.h	/^    GREATER = 6,$/;"	e	enum:e_token
GREATER_DOUBLE	includes/minishell.h	/^    GREATER_DOUBLE = 7$/;"	e	enum:e_token
HEX_BASE	includes/libft.h	15;"	d
HEX_BASE	includes/printf.h	16;"	d
HEX_BASE	libft/libft.h	16;"	d
HEX_BASE	libft/printf.h	16;"	d
LESS	includes/minishell.h	/^    LESS = 4,$/;"	e	enum:e_token
LESS_DOUBLE	includes/minishell.h	/^    LESS_DOUBLE = 5,$/;"	e	enum:e_token
LEXER	Makefile	/^LEXER = lexer.c quotes.c \\$/;"	m
LEXER_DIR	Makefile	/^LEXER_DIR = lexer\/$/;"	m
LEXER_FILES	Makefile	/^LEXER_FILES = $(addprefix $(LEXER_DIR), $(LEXER))$/;"	m
LIBFT	Makefile	/^LIBFT = $(LIBFT_DIR)\/libft.a$/;"	m
LIBFT_DIR	Makefile	/^LIBFT_DIR = .\/libft$/;"	m
LIBFT_H	includes/libft.h	14;"	d
LIBFT_H	libft/libft.h	14;"	d
MANDATORY	Makefile	/^MANDATORY = minishell$/;"	m
MINISHELL_H	includes/minishell.h	2;"	d
NAME	Makefile	/^NAME = $(MANDATORY)$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NOT_FIND	includes/minishell.h	16;"	d
NO_COLOR	libft/Makefile	/^NO_COLOR = \\033[m$/;"	m
OBJS	libft/Makefile	/^OBJS = $(SRCS:.c=.o) $/;"	m
OBJS_BONUS	libft/Makefile	/^OBJS_BONUS = $(BONUS:.c=.o)$/;"	m
OK_COLOR	libft/Makefile	/^OK_COLOR = \\033[0;32m$/;"	m
PIPE	includes/minishell.h	/^    PIPE = 3,$/;"	e	enum:e_token
PRINTF_H	includes/printf.h	15;"	d
PRINTF_H	libft/printf.h	15;"	d
PROMPT	includes/minishell.h	17;"	d
RED	Makefile	/^RED = \\033[31m$/;"	m
REDIRECTIONS	Makefile	/^REDIRECTIONS = file_io.c pipe.c \\$/;"	m
REDIRECTIONS_DIR	Makefile	/^REDIRECTIONS_DIR = redirections\/$/;"	m
REDIRECTIONS_FILES	Makefile	/^REDIRECTIONS_FILES = $(addprefix $(REDIRECTIONS_DIR), $(REDIRECTIONS))$/;"	m
SQUOTE	includes/minishell.h	/^		SQUOTE,$/;"	e	enum:e_quoting_status
SRCS	Makefile	/^SRCS = main.c signals.c srcs_utils.c error.c free.c handle_quotes.c delete_quotes.c\\$/;"	m
SRCS	libft/Makefile	/^SRCS = ft_atoi.c ft_bzero.c ft_calloc.c ft_isalnum.c ft_isalpha.c ft_isascii.c \\$/;"	m
SRCS_DIR	Makefile	/^SRCS_DIR = srcs\/$/;"	m
SRCS_FILES	Makefile	/^SRCS_FILES = $(addprefix $(SRCS_DIR), $(SRCS))$/;"	m
VAR	includes/minishell.h	/^    VAR = 2,$/;"	e	enum:e_token
WORD	includes/minishell.h	/^    WORD = 1,$/;"	e	enum:e_token
add_detail_quotes	srcs/srcs_utils.c	/^static bool add_detail_quotes(char *command)$/;"	f	file:
add_new_env_var	builtin/export.c	/^void add_new_env_var(t_data *data, char *key, char *value)$/;"	f
add_token	lexer/lexer.c	/^int    add_token(char *input, int i, t_lexer **head)$/;"	f
add_word	lexer/lexer.c	/^int     add_word(char *input, int i, t_lexer **head)$/;"	f
args	includes/minishell.h	/^	char				**args;$/;"	m	struct:s_command
builtin_cd	builtin/cd.c	/^int	builtin_cd(t_data *data, t_command *cmd)$/;"	f
builtin_echo	builtin/echo.c	/^int	builtin_echo(t_data *data, t_command *cmd)$/;"	f
builtin_env	builtin/env.c	/^int	builtin_env(t_data *data, t_command *cmd)$/;"	f
builtin_exit	builtin/exit.c	/^int builtin_exit(t_data *data, t_command *cmd)$/;"	f
builtin_export	builtin/export.c	/^int builtin_export(t_data *data, t_command *cmd)$/;"	f
builtin_pwd	builtin/pwd.c	/^int	builtin_pwd(t_data *data, t_command *cmd)$/;"	f
builtin_unset	builtin/unset.c	/^int	builtin_unset(t_data *data, t_command *cmd)$/;"	f
builtins	builtin/builtin.c	/^t_builtin builtins[] = $/;"	v
change_back_to_default	srcs/delete_quotes.c	/^static bool	change_back_to_default(t_lexer **token_node, int *i)$/;"	f	file:
change_status_to_quote	srcs/delete_quotes.c	/^static void	change_status_to_quote(t_lexer **token_node, int *i)$/;"	f	file:
check_command_not_found	execution/execute_utils.c	/^int 	check_command_not_found(t_data *data, t_command *cmd)$/;"	f
check_infile_outfile	redirections/file_io.c	/^bool	check_infile_outfile(t_io_fds *io)$/;"	f
check_invalid_consecutive_tokens	expander/variables.c	/^static bool  check_invalid_consecutive_tokens(t_lexer *node)$/;"	f	file:
check_invalid_tokens	expander/variables.c	/^static bool check_invalid_tokens(t_lexer *node)$/;"	f	file:
clean	libft/ft_split.c	/^static void	clean(char **array, unsigned int nb)$/;"	f	file:
close_fds	srcs/srcs_utils.c	/^void	close_fds(t_command *cmds, bool close_backups)$/;"	f
close_pipe_fds	redirections/pipe.c	/^void 	close_pipe_fds(t_command *cmds, t_command *skip_cmd)$/;"	f
closed_quotes	lexer/quotes.c	/^bool closed_quotes(char *line)$/;"	f
cmd	includes/minishell.h	/^	t_command	*cmd;$/;"	m	struct:s_data
cmd_add_bottom	command/create_commands_test.c	/^static void	cmd_add_bottom(t_cmd **cmd_head, t_cmd *new_node)$/;"	f	file:
cmd_is_dir	execution/execute_utils.c	/^bool 	cmd_is_dir(char *cmd)$/;"	f
cmd_new_node	command/create_commands_test.c	/^static t_cmd	*cmd_new_node()$/;"	f	file:
command	includes/minishell.h	/^	char				*command;$/;"	m	struct:s_command
connect_node	env/chained.c	/^void	connect_node(t_var *curr_node, t_var *next_node)$/;"	f
content	includes/libft.h	/^	void			*content;$/;"	m	struct:s_list
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
count_len	srcs/handle_quotes.c	/^int	count_len(char *str, int count, int i)$/;"	f
create_children	execution/execute.c	/^static int create_children(t_data *data)$/;"	f	file:
create_commands	command/create_commands_test.c	/^void	create_commands(t_data *data)$/;"	f
create_env_arr	env/env.c	/^char	**create_env_arr(char **envp)$/;"	f
create_env_list	env/list.c	/^void	create_env_list(t_var **env_head, char **env_arr)$/;"	f
create_list	env/chained.c	/^void	create_list(t_var **env_head, t_var *node)$/;"	f
create_pipes	redirections/pipe.c	/^bool	create_pipes(t_data *data)$/;"	f
create_test_command	srcs/main.c	/^t_command *create_test_command() $/;"	f
create_test_io_fds	srcs/main.c	/^t_io_fds *create_test_io_fds() $/;"	f
delete_quotes	srcs/delete_quotes.c	/^int	delete_quotes(t_lexer **token_node)$/;"	f
delete_var_name	expander/var_replace.c	/^int     delete_var_name(t_lexer *node, int index)$/;"	f
delete_var_name_and_replace	expander/var_replace.c	/^char    *delete_var_name_and_replace(t_lexer *node, char *var_value, int index)$/;"	f
digit_count	libft/ft_itoa.c	/^static int	digit_count(long n)$/;"	f	file:
e_quoting_status	includes/minishell.h	/^enum e_quoting_status$/;"	g
e_token	includes/minishell.h	/^typedef enum e_token$/;"	g
env	includes/minishell.h	/^	char		**env;$/;"	m	struct:s_data
env_head	includes/minishell.h	/^    t_var 		*env_head;$/;"	m	struct:s_data
errmsg_cmd	srcs/srcs_utils.c	/^int 	errmsg_cmd(char *command, char *detail, char *error_message, int error_nb)$/;"	f
execute	execution/execute.c	/^int	execute(t_data *data)$/;"	f
execute_builtin	builtin/builtin.c	/^int	execute_builtin(t_data *data, t_command *cmd)$/;"	f
execute_command	execution/execute_cmd.c	/^int execute_command(t_data *data, t_command *cmd)$/;"	f
execute_local_bin	execution/execute_cmd.c	/^static int execute_local_bin(t_data *data, t_command *cmd)$/;"	f	file:
execute_sys_bin	execution/execute_cmd.c	/^static int execute_sys_bin(t_data *data, t_command *cmd)$/;"	f	file:
exit_shell	srcs/srcs_utils.c	/^void 	exit_shell(t_data *data, int exit_number)$/;"	f
extract_content	env/list.c	/^char	*extract_content(char *line, int start, int end)$/;"	f
extract_var_from_string	expander/var_expander.c	/^static char    *extract_var_from_string(char *word)$/;"	f	file:
fd_in	includes/minishell.h	/^	int		fd_in;$/;"	m	struct:s_io_fds
fd_out	includes/minishell.h	/^	int		fd_out;$/;"	m	struct:s_io_fds
fill_lexer_struct	lexer/lexer.c	/^t_lexer   *fill_lexer_struct(char *input)$/;"	f
fill_word	command/create_commands_test.c	/^static void	fill_word(t_cmd **cmd_head,  t_lexer **node)$/;"	f	file:
find_matching_quote	lexer/quotes.c	/^int	find_matching_quote(char *line, int i, int *num_del, int del)$/;"	f
find_matching_var	expander/var_expander.c	/^static char    *find_matching_var(t_data *data, char *word)$/;"	f	file:
find_valid_cmd_path	execution/parse_path.c	/^static char	*find_valid_cmd_path(char *cmd, char **paths)$/;"	f	file:
flag_variables	expander/variables.c	/^static void flag_variables (t_lexer *node)$/;"	f	file:
free_data	srcs/free.c	/^void	free_data(t_data *data, bool clear_history)$/;"	f
free_env_array	srcs/free.c	/^void	free_env_array(char **env_arr)$/;"	f
free_env_struct	srcs/free.c	/^void	free_env_struct(t_var *env_head)$/;"	f
free_ptr	srcs/srcs_utils.c	/^void    free_ptr(void *ptr)$/;"	f
free_str_tab	srcs/srcs_utils.c	/^void 	free_str_tab(char **tab)$/;"	f
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t nelements, size_t bytes)$/;"	f
ft_cmp_nb	libft/ft_cmp_nb.c	/^int	ft_cmp_nb(char *a, char *b)$/;"	f
ft_conversions	libft/printf.c	/^int	ft_conversions(const char c, va_list *args)$/;"	f
ft_count_ac	libft/ft_count_ac.c	/^int	ft_count_ac(char **av)$/;"	f
ft_error	srcs/error.c	/^int	ft_error(int error)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(char *av)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del) (void *))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_malloc_substr	libft/ft_substr.c	/^static char	*ft_malloc_substr(unsigned int start, size_t n, size_t lenstr)$/;"	f	file:
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *memoire, int value, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *memoire1, const void *memoire2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void	*dest, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *dest, int value, size_t n)$/;"	f
ft_printf	libft/printf.c	/^int	ft_printf(const char *format, ...)$/;"	f
ft_process_av	libft/ft_process_av.c	/^char	**ft_process_av(int ac, char **av)$/;"	f
ft_putchar	libft/put.c	/^int	ft_putchar(int c)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putdecimal	libft/put.c	/^int	ft_putdecimal(va_list *args)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *str, int fd)$/;"	f
ft_putnbr	libft/put.c	/^int	ft_putnbr(unsigned long nb, unsigned int base, int transform)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putptr	libft/put.c	/^int	ft_putptr(va_list *args)$/;"	f
ft_putstr	libft/put.c	/^int	ft_putstr(const char *str)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *str, int fd)$/;"	f
ft_set_str	libft/ft_strtrim.c	/^static int	ft_set_str(const char c, const char *set)$/;"	f	file:
ft_skip_white_spaces	srcs/srcs_utils.c	/^int ft_skip_white_spaces(char *str)$/;"	f
ft_split	libft/ft_split.c	/^char	**ft_split(char const *str, char c)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strcmp	srcs/srcs_utils.c	/^int	ft_strcmp(char *s1, char *s2)$/;"	f
ft_strcpy	srcs/srcs_utils.c	/^char *ft_strcpy(char *dest, const char *src)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *src)$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *str, void (*fonction)(unsigned int, char*))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(const char *s1, const char *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dest, const char *src, size_t n)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dest, const char *src, size_t n)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*fonction)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncpy	builtin/export.c	/^void	ft_strncpy(char *src, char *dest, int size)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *src, const char *to_find, size_t n)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(const char *s1, const char *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *str, unsigned int start, size_t n)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
func	includes/minishell.h	/^	int		(*func)(t_data *data, t_command *cmd);$/;"	m	struct:s_builtin
get_bottom_cmd	command/create_commands_test.c	/^static t_cmd	*get_bottom_cmd(t_cmd **cmd_head)$/;"	f	file:
get_children	execution/execute.c	/^static int get_children(t_data *data)$/;"	f	file:
get_cmd_path	execution/parse_path.c	/^char	*get_cmd_path(t_data *data, char *name)$/;"	f
get_env_path	env/env.c	/^char    *get_env_path(char **envp)$/;"	f
get_env_var_value	execution/parse_path.c	/^char	*get_env_var_value(char **env, char *var)$/;"	f
get_home_path	env/env.c	/^char    *get_home_path(char **envp)$/;"	f
get_line_infos	env/list.c	/^char	*get_line_infos(char *line)$/;"	f
get_line_name	env/list.c	/^char	*get_line_name(char *line)$/;"	f
get_paths_from_env	execution/parse_path.c	/^static char	**get_paths_from_env(t_data *data)$/;"	f	file:
get_var_value	expander/var_expander_utils.c	/^char     *get_var_value(t_data *data, char *var_name)$/;"	f
handle_quotes	srcs/handle_quotes.c	/^int	handle_quotes(t_data *data)$/;"	f
heredoc_delimiter	includes/minishell.h	/^	char	*heredoc_delimiter;$/;"	m	struct:s_io_fds
heredoc_quotes	includes/minishell.h	/^	bool	heredoc_quotes;$/;"	m	struct:s_io_fds
id	includes/minishell.h	/^	int id;$/;"	m	struct:s_var
if_quotes_and_default	srcs/delete_quotes.c	/^static bool	if_quotes_and_default(t_lexer **token_node, int i)$/;"	f	file:
index	includes/minishell.h	/^	int index;$/;"	m	struct:s_var
infile	includes/minishell.h	/^	char	*infile;$/;"	m	struct:s_io_fds
infos	includes/minishell.h	/^	char *infos;$/;"	m	struct:s_var
init_env	env/init.c	/^t_var	*init_env(char **env_array)$/;"	f
init_env_var	env/init.c	/^t_var	*init_env_var(char *name, char *infos, int id)$/;"	f
init_exec	execution/execute.c	/^static int init_exec(t_data *data)$/;"	f	file:
invalid_next_char	expander/var_expander_utils.c	/^bool    invalid_next_char(char c)$/;"	f
io_fds	includes/minishell.h	/^	t_io_fds			*io_fds;$/;"	m	struct:s_command
is_index	env/is.c	/^int is_index(char **env, char *var)$/;"	f
is_null	env/is.c	/^int	is_null(char *str)$/;"	f
is_quotes	env/is.c	/^bool is_quotes(char *str)$/;"	f
is_token	lexer/lexer.c	/^bool    is_token(char c)$/;"	f
is_value_null	env/is.c	/^int	is_value_null(char *str)$/;"	f
join	includes/minishell.h	/^	bool		join;$/;"	m	struct:s_lexer
join_strs	srcs/srcs_utils.c	/^char *join_strs(char *str, char *add)$/;"	f
lexer	lexer/lexer.c	/^void    lexer(t_data *data)$/;"	f
lexer_head	includes/minishell.h	/^    t_lexer     *lexer_head;$/;"	m	struct:s_data
line	includes/minishell.h	/^    char        *line;$/;"	m	struct:s_data
line_count	env/env.c	/^int	line_count(char **envp)$/;"	f
main	srcs/main.c	/^int main(int , char **, char **envp)$/;"	f
malloc_each_line	env/env.c	/^char	*malloc_each_line(char *line)$/;"	f
name	includes/minishell.h	/^	char	*name;$/;"	m	struct:s_builtin
name	includes/minishell.h	/^	char *name;$/;"	m	struct:s_var
new_node	srcs/srcs_utils.c	/^t_lexer *new_node(char *input, t_token token)$/;"	f
next	includes/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	includes/minishell.h	/^	struct s_command	*next;$/;"	m	struct:s_command	typeref:struct:s_command::s_command
next	includes/minishell.h	/^	struct s_var *next;$/;"	m	struct:s_var	typeref:struct:s_var::s_var
next	includes/minishell.h	/^    t_lexer     *next;$/;"	m	struct:s_lexer
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
outfile	includes/minishell.h	/^	char	*outfile;$/;"	m	struct:s_io_fds
parse_input	srcs/main.c	/^bool    parse_input(t_data *data)$/;"	f
path	includes/minishell.h	/^	char				*path;$/;"	m	struct:s_command
pid	includes/minishell.h	/^	pid_t 		 pid;$/;"	m	struct:s_data
pipe_fd	includes/minishell.h	/^	int					*pipe_fd;$/;"	m	struct:s_command
pipe_output	includes/minishell.h	/^	bool				pipe_output;$/;"	m	struct:s_command
prev	includes/minishell.h	/^	struct s_command	*prev;$/;"	m	struct:s_command	typeref:struct:s_command::s_command
prev	includes/minishell.h	/^	struct s_var *prev;$/;"	m	struct:s_var	typeref:struct:s_var::s_var
previous	includes/minishell.h	/^    t_lexer     *previous;$/;"	m	struct:s_lexer
print_command_info	srcs/main.c	/^void print_command_info(t_command *cmd) $/;"	f
quotes_check	expander/var_expander_utils.c	/^void    quotes_check(int *single_quote, char c)$/;"	f
quotes_handling	lexer/lexer.c	/^int quotes_handling(char *str, int start, char quote)$/;"	f
redirect_io	redirections/file_io.c	/^bool	redirect_io(t_io_fds *io)$/;"	f
replace_value	expander/var_replace.c	/^int   replace_value(t_lexer *node, char *var_value, int index)$/;"	f
replace_var	expander/var_expander.c	/^static void    replace_var(t_data *data, t_lexer *node)$/;"	f	file:
reset_loop	srcs/main.c	/^void    reset_loop(t_data *data)$/;"	f
restore_io	redirections/file_io.c	/^bool 	restore_io(t_io_fds *io)$/;"	f
s_builtin	includes/minishell.h	/^typedef struct s_builtin$/;"	s
s_command	includes/minishell.h	/^typedef struct s_command$/;"	s
s_data	includes/minishell.h	/^typedef struct s_data$/;"	s
s_io_fds	includes/minishell.h	/^typedef struct s_io_fds$/;"	s
s_lexer	includes/minishell.h	/^typedef struct s_lexer$/;"	s
s_list	includes/libft.h	/^typedef struct s_list$/;"	s
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
s_var	includes/minishell.h	/^typedef struct s_var$/;"	s
set_pipe_fds	redirections/pipe.c	/^bool 	set_pipe_fds(t_command *cmds, t_command *cmd)$/;"	f
sigint_handling	srcs/signals.c	/^void sigint_handling(int signal)$/;"	f
signals_handling	srcs/signals.c	/^void    signals_handling(void)$/;"	f
split_key_value	builtin/export.c	/^void split_key_value(char *str, char **key, char **value)$/;"	f
stack_add_bottom	srcs/srcs_utils.c	/^void    stack_add_bottom(t_lexer **head, t_lexer *new)$/;"	f
status	includes/minishell.h	/^	int			status;$/;"	m	struct:s_lexer
stdin_backup	includes/minishell.h	/^	int		stdin_backup;$/;"	m	struct:s_io_fds
stdout_backup	includes/minishell.h	/^	int		stdout_backup;$/;"	m	struct:s_io_fds
t_builtin	includes/minishell.h	/^}	t_builtin;$/;"	t	typeref:struct:s_builtin
t_command	includes/minishell.h	/^typedef struct s_command t_command;$/;"	t	typeref:struct:s_command
t_command	includes/minishell.h	/^}	t_command;$/;"	t	typeref:struct:s_command
t_data	includes/minishell.h	/^typedef struct s_data t_data;$/;"	t	typeref:struct:s_data
t_data	includes/minishell.h	/^}   t_data;$/;"	t	typeref:struct:s_data
t_io_fds	includes/minishell.h	/^}	t_io_fds;$/;"	t	typeref:struct:s_io_fds
t_lexer	includes/minishell.h	/^typedef struct s_lexer t_lexer;$/;"	t	typeref:struct:s_lexer
t_lexer	includes/minishell.h	/^}   t_lexer;$/;"	t	typeref:struct:s_lexer
t_list	includes/libft.h	/^}		t_list;$/;"	t	typeref:struct:s_list
t_list	libft/libft.h	/^}		t_list;$/;"	t	typeref:struct:s_list
t_token	includes/minishell.h	/^}   t_token;$/;"	t	typeref:enum:e_token
t_var	includes/minishell.h	/^typedef struct s_var t_var;$/;"	t	typeref:struct:s_var
t_var	includes/minishell.h	/^}	t_var;$/;"	t	typeref:struct:s_var
token	includes/minishell.h	/^    t_token     token;$/;"	m	struct:s_lexer
type	includes/minishell.h	/^	int			type;$/;"	m	struct:s_lexer
update_env_var	builtin/export.c	/^void update_env_var(t_data *data, char *key, char *value, int index)$/;"	f
var_exist	expander/var_expander_utils.c	/^bool    var_exist(t_data *data, char *var_name)$/;"	f
var_exists	includes/minishell.h	/^	bool		var_exists;$/;"	m	struct:s_lexer
var_in_quotes	expander/var_expander_utils.c	/^bool    var_in_quotes(char *word, int i)$/;"	f
var_word_len	expander/var_expander_utils.c	/^int var_word_len(char *str)$/;"	f
variable_check	expander/variables.c	/^int variable_check(t_data *data)$/;"	f
variable_expander	expander/var_expander.c	/^void    variable_expander(t_data *data)$/;"	f
word	includes/minishell.h	/^    char        *word;$/;"	m	struct:s_lexer
word_backup	includes/minishell.h	/^	char		*word_backup;$/;"	m	struct:s_lexer
words_count	libft/ft_split.c	/^static size_t	words_count(char const *str, char c)$/;"	f	file:
words_lenght	libft/ft_split.c	/^static size_t	words_lenght(char const *str, char c)$/;"	f	file:
ws	srcs/srcs_utils.c	/^int	ws(char c)$/;"	f
